[{"C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\index.js":"1","C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\App.js":"2","C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\pages\\index.js":"3","C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\pages\\about.js":"4","C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\pages\\create.js":"5","C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\pages\\signup.js":"6","C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Contact\\contact.js":"7","C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Body\\Body.js":"8","C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Header\\header.js":"9","C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Footer\\Footer.js":"10","C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Footer\\Footer.styles.js":"11","C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Resume\\Resume.js":"12","C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Editor\\editor.js":"13","C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\input\\input.js":"14","C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Analysis\\Analyze.js":"15","C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Navbar\\index.js":"16","C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Recc\\jobRolesData.jsx":"17","C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Recc\\Rec.js":"18","C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Explore\\App1.js":"19","C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Explore\\SkillSuggestions.js":"20","C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Explore\\SkillInput.js":"21"},{"size":251,"mtime":1698005392578,"results":"22","hashOfConfig":"23"},{"size":1255,"mtime":1698165730804,"results":"24","hashOfConfig":"23"},{"size":3444,"mtime":1698166183475,"results":"25","hashOfConfig":"23"},{"size":1945,"mtime":1698002054873,"results":"26","hashOfConfig":"23"},{"size":181,"mtime":1698002067428,"results":"27","hashOfConfig":"23"},{"size":1365,"mtime":1698002095814,"results":"28","hashOfConfig":"23"},{"size":2576,"mtime":1698002973176,"results":"29","hashOfConfig":"23"},{"size":2933,"mtime":1698002972387,"results":"30","hashOfConfig":"23"},{"size":765,"mtime":1698002960835,"results":"31","hashOfConfig":"23"},{"size":2109,"mtime":1698002958188,"results":"32","hashOfConfig":"23"},{"size":1057,"mtime":1698002958698,"results":"33","hashOfConfig":"23"},{"size":11480,"mtime":1698002957601,"results":"34","hashOfConfig":"23"},{"size":20985,"mtime":1698002973028,"results":"35","hashOfConfig":"23"},{"size":285,"mtime":1698002959267,"results":"36","hashOfConfig":"23"},{"size":1825,"mtime":1698002972706,"results":"37","hashOfConfig":"23"},{"size":3103,"mtime":1698165863217,"results":"38","hashOfConfig":"23"},{"size":582,"mtime":1698007343560,"results":"39","hashOfConfig":"23"},{"size":1672,"mtime":1698008249153,"results":"40","hashOfConfig":"23"},{"size":459,"mtime":1698165794923,"results":"41","hashOfConfig":"23"},{"size":5542,"mtime":1698165521715,"results":"42","hashOfConfig":"23"},{"size":653,"mtime":1698165489282,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"94kftj",{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"47"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"47"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\index.js",[],[],["112"],"C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\App.js",[],[],"C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\pages\\index.js",[],[],"C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\pages\\about.js",[],[],"C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\pages\\create.js",[],[],"C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\pages\\signup.js",[],[],"C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Contact\\contact.js",[],[],"C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Body\\Body.js",[],[],"C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Header\\header.js",[],[],"C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Footer\\Footer.js",[],[],"C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Footer\\Footer.styles.js",[],[],"C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Resume\\Resume.js",["113","114","115","116","117","118"],[],"import React, { forwardRef, useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  AtSign,\r\n  Calendar,\r\n  GitHub,\r\n  Linkedin,\r\n  MapPin,\r\n  Paperclip,\r\n  Phone,\r\n} from \"react-feather\";\r\n\r\nimport styles from \"./Resume.module.css\";\r\n\r\nconst Resume = forwardRef((props, ref) => {\r\n  const information = props.information;\r\n  const sections = props.sections;\r\n  const containerRef = useRef();\r\n\r\n  const [columns, setColumns] = useState([[], []]);\r\n  const [source, setSource] = useState(\"\");\r\n  const [target, seTarget] = useState(\"\");\r\n\r\n  const info = {\r\n    workExp: information[sections.workExp],\r\n    project: information[sections.project],\r\n    achievement: information[sections.achievement],\r\n    education: information[sections.education],\r\n    basicInfo: information[sections.basicInfo],\r\n    summary: information[sections.summary],\r\n    other: information[sections.other],\r\n  };\r\n\r\n  const getFormattedDate = (value) => {\r\n    if (!value) return \"\";\r\n    const date = new Date(value);\r\n\r\n    return `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\r\n  };\r\n\r\n  const sectionDiv = {\r\n    [sections.workExp]: (\r\n      <div\r\n        key={\"workexp\"}\r\n        draggable\r\n        onDragOver={() => seTarget(info.workExp?.id)}\r\n        onDragEnd={() => setSource(info.workExp?.id)}\r\n        className={`${styles.section} ${\r\n          info.workExp?.sectionTitle ? \"\" : styles.hidden\r\n        }`}\r\n      >\r\n        <div className={styles.sectionTitle}>{info.workExp.sectionTitle}</div>\r\n        <div className={styles.content}>\r\n          {info.workExp?.details?.map((item) => (\r\n            <div className={styles.item} key={item.title}>\r\n              {item.title ? (\r\n                <p className={styles.title}>{item.title}</p>\r\n              ) : (\r\n                <span />\r\n              )}\r\n              {item.companyName ? (\r\n                <p className={styles.subTitle}>{item.companyName}</p>\r\n              ) : (\r\n                <span />\r\n              )}\r\n              {item.certificationLink ? (\r\n                <a className={styles.link} href={item.certificationLink}>\r\n                  <Paperclip />\r\n                  {item.certificationLink}\r\n                </a>\r\n              ) : (\r\n                <span />\r\n              )}\r\n              {item.startDate && item.endDate ? (\r\n                <div className={styles.date}>\r\n                  <Calendar /> {getFormattedDate(item.startDate)}-\r\n                  {getFormattedDate(item.endDate)}\r\n                </div>\r\n              ) : (\r\n                <div />\r\n              )}\r\n              {item.location ? (\r\n                <p className={styles.location}><MapPin/>{item.location}</p>\r\n                // <p className={styles.date}>\r\n                //   <MapPin /> Remote\r\n                // </p>\r\n              ) : (\r\n                <span />\r\n              )}\r\n              {item.points?.length > 0 ? (\r\n                <ul className={styles.points}>\r\n                  {item.points?.map((elem, index) => (\r\n                    <li className={styles.point} key={elem + index}>\r\n                      {elem}\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    ),\r\n    [sections.project]: (\r\n      <div\r\n        key={\"project\"}\r\n        draggable\r\n        onDragOver={() => seTarget(info.project?.id)}\r\n        onDragEnd={() => setSource(info.project?.id)}\r\n        className={`${styles.section} ${\r\n          info.project?.sectionTitle ? \"\" : styles.hidden\r\n        }`}\r\n      >\r\n        <div className={styles.sectionTitle}>{info.project.sectionTitle}</div>\r\n        <div className={styles.content}>\r\n          {info.project?.details?.map((item) => (\r\n            <div className={styles.item}>\r\n              {item.title ? (\r\n                <p className={styles.title}>{item.title}</p>\r\n              ) : (\r\n                <span />\r\n              )}\r\n              {item.link ? (\r\n                <a className={styles.link} href={item.link}>\r\n                  <Paperclip />\r\n                  {item.link}\r\n                </a>\r\n              ) : (\r\n                <span />\r\n              )}\r\n              {item.github ? (\r\n                <a className={styles.link} href={item.github}>\r\n                  <GitHub />\r\n                  {item.github}\r\n                </a>\r\n              ) : (\r\n                <span />\r\n              )}\r\n              {item.overview ? (\r\n                <p className={styles.overview}>{item.overview} </p>\r\n              ) : (\r\n                <span />\r\n              )}\r\n              {item.points?.length > 0 ? (\r\n                <ul className={styles.points}>\r\n                  {item.points?.map((elem, index) => (\r\n                    <li className={styles.point} key={elem + index}>\r\n                      {elem}\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    ),\r\n    [sections.education]: (\r\n      <div\r\n        key={\"education\"}\r\n        draggable\r\n        onDragOver={() => seTarget(info.education?.id)}\r\n        onDragEnd={() => setSource(info.education?.id)}\r\n        className={`${styles.section} ${\r\n          info.education?.sectionTitle ? \"\" : styles.hidden\r\n        }`}\r\n      >\r\n        <div className={styles.sectionTitle}>\r\n          {info.education?.sectionTitle}\r\n        </div>\r\n        <div className={styles.content}>\r\n          {info.education?.details?.map((item) => (\r\n            <div className={styles.item}>\r\n              {item.title ? (\r\n                <p className={styles.title}>{item.title}</p>\r\n              ) : (\r\n                <span />\r\n              )}\r\n              {item.college ? (\r\n                <p className={styles.subTitle}>{item.college}</p>\r\n              ) : (\r\n                <span />\r\n              )}\r\n              {item.startDate && item.endDate ? (\r\n                <div className={styles.date}>\r\n                  <Calendar /> {getFormattedDate(item.startDate)} -\r\n                  {getFormattedDate(item.endDate)}\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    ),\r\n    [sections.achievement]: (\r\n      <div\r\n        key={\"achievement\"}\r\n        draggable\r\n        onDragOver={() => seTarget(info.achievement?.id)}\r\n        onDragEnd={() => setSource(info.achievement?.id)}\r\n        className={`${styles.section} ${\r\n          info.achievement?.sectionTitle ? \"\" : styles.hidden\r\n        }`}\r\n      >\r\n        <div className={styles.sectionTitle}>\r\n          {info.achievement?.sectionTitle}\r\n        </div>\r\n        <div className={styles.content}>\r\n          {info.achievement?.points?.length > 0 ? (\r\n            <ul className={styles.numbered}>\r\n              {info.achievement?.points?.map((elem, index) => (\r\n                <li className={styles.point} key={elem + index}>\r\n                  {elem}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          ) : (\r\n            <span />\r\n          )}\r\n        </div>\r\n      </div>\r\n    ),\r\n    [sections.summary]: (\r\n      <div\r\n        key={\"summary\"}\r\n        draggable\r\n        onDragOver={() => seTarget(info.summary?.id)}\r\n        onDragEnd={() => setSource(info.summary?.id)}\r\n        className={`${styles.section} ${\r\n          info.summary?.sectionTitle ? \"\" : styles.hidden\r\n        }`}\r\n      >\r\n        <div className={styles.sectionTitle}>{info.summary?.sectionTitle}</div>\r\n        <div className={styles.content}>\r\n          <p className={styles.overview}>{info.summary?.detail}</p>\r\n        </div>\r\n      </div>\r\n    ),\r\n    [sections.other]: (\r\n      <div\r\n        key={\"other\"}\r\n        draggable\r\n        onDragOver={() => seTarget(info.other?.id)}\r\n        onDragEnd={() => setSource(info.other?.id)}\r\n        className={`${styles.section} ${\r\n          info.other?.sectionTitle ? \"\" : styles.hidden\r\n        }`}\r\n      >\r\n        <div className={styles.sectionTitle}>{info.other?.sectionTitle}</div>\r\n        <div className={styles.content}>\r\n          <p className={styles.overview}>{info?.other?.detail}</p>\r\n        </div>\r\n      </div>\r\n    ),\r\n  };\r\n\r\n  const swapSourceTarget = (source, target) => {\r\n    if (!source || !target) return;\r\n    const tempColumns = [[...columns[0]], [...columns[1]]];\r\n\r\n    let sourceRowIndex = tempColumns[0].findIndex((item) => item === source);\r\n    let sourceColumnIndex = 0;\r\n    if (sourceRowIndex < 0) {\r\n      sourceColumnIndex = 1;\r\n      sourceRowIndex = tempColumns[1].findIndex((item) => item === source);\r\n    }\r\n\r\n    let targetRowIndex = tempColumns[0].findIndex((item) => item === target);\r\n    let targetColumnIndex = 0;\r\n    if (targetRowIndex < 0) {\r\n      targetColumnIndex = 1;\r\n      targetRowIndex = tempColumns[1].findIndex((item) => item === target);\r\n    }\r\n\r\n    const tempSource = tempColumns[sourceColumnIndex][sourceRowIndex];\r\n    tempColumns[sourceColumnIndex][sourceRowIndex] =\r\n      tempColumns[targetColumnIndex][targetRowIndex];\r\n\r\n    tempColumns[targetColumnIndex][targetRowIndex] = tempSource;\r\n\r\n    setColumns(tempColumns);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setColumns([\r\n      [sections.project, sections.education, sections.summary],\r\n      [sections.workExp, sections.achievement, sections.other],\r\n    ]);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    swapSourceTarget(source, target);\r\n  }, [source]);\r\n\r\n  useEffect(() => {\r\n    const container = containerRef.current;\r\n    if (!props.activeColor || !container) return;\r\n\r\n    container.style.setProperty(\"--color\", props.activeColor);\r\n  }, [props.activeColor]);\r\n\r\n  return (\r\n    <div ref={ref}>\r\n      <div ref={containerRef} className={styles.container}>\r\n        <div className={styles.header}>\r\n          <p className={styles.heading}>{info.basicInfo?.detail?.name}</p>\r\n          <p className={styles.subHeading}>{info.basicInfo?.detail?.title}</p>\r\n\r\n          <div className={styles.links}>\r\n            {info.basicInfo?.detail?.email ? (\r\n              <a className={styles.link} type=\"email\">\r\n                <AtSign /> {info.basicInfo?.detail?.email}\r\n              </a>\r\n            ) : (\r\n              <span />\r\n            )}\r\n            {info.basicInfo?.detail?.phone ? (\r\n              <a className={styles.link}>\r\n                <Phone /> {info.basicInfo?.detail?.phone}\r\n              </a>\r\n            ) : (\r\n              <span />\r\n            )}\r\n            {info.basicInfo?.detail?.linkedin ? (\r\n              <a className={styles.link}>\r\n                <Linkedin /> {info.basicInfo?.detail?.linkedin}\r\n              </a>\r\n            ) : (\r\n              <span />\r\n            )}\r\n            {info.basicInfo?.detail?.github ? (\r\n              <a className={styles.link}>\r\n                <GitHub /> {info.basicInfo?.detail?.github}\r\n              </a>\r\n            ) : (\r\n              <span />\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className={styles.main}>\r\n          <div className={styles.col1}>\r\n            {columns[0].map((item) => sectionDiv[item])}\r\n          </div>\r\n          <div className={styles.col2}>\r\n            {columns[1].map((item) => sectionDiv[item])}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Resume;","C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Editor\\editor.js",["119","120","121","122"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { X } from \"react-feather\";\r\n\r\nimport InputControl from \"../input/input\";\r\n\r\nimport styles from \"./Editor1.module.css\";\r\n\r\nfunction Editor(props) {\r\n  const sections = props.sections;\r\n  const information = props.information;\r\n\r\n  const [activeSectionKey, setActiveSectionKey] = useState(\r\n    Object.keys(sections)[0]\r\n  );\r\n  const [activeInformation, setActiveInformation] = useState(\r\n    information[sections[Object.keys(sections)[0]]]\r\n  );\r\n  const [activeDetailIndex, setActiveDetailIndex] = useState(0);\r\n  const [sectionTitle, setSectionTitle] = useState(\r\n    sections[Object.keys(sections)[0]]\r\n  );\r\n  const [values, setValues] = useState({\r\n    name: activeInformation?.detail?.name || \"\",\r\n    title: activeInformation?.detail?.title || \"\",\r\n    linkedin: activeInformation?.detail?.linkedin || \"\",\r\n    github: activeInformation?.detail?.github || \"\",\r\n    phone: activeInformation?.detail?.phone || \"\",\r\n    email: activeInformation?.detail?.email || \"\",\r\n  });\r\n\r\n  const handlePointUpdate = (value, index) => {\r\n    const tempValues = { ...values };\r\n    if (!Array.isArray(tempValues.points)) tempValues.points = [];\r\n    tempValues.points[index] = value;\r\n    setValues(tempValues);\r\n  };\r\n\r\n  const workExpBody = (\r\n    <div className={styles.detail}>\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Title\"\r\n          placeholder=\"Enter title eg : Data Analyst\"\r\n          value={values.title}\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, title: event.target.value }))\r\n          }\r\n        />\r\n        <InputControl\r\n          label=\"Company Name\"\r\n          placeholder=\"Enter company name eg : Google\"\r\n          value={values.companyName}\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, companyName: event.target.value }))\r\n          }\r\n        />\r\n      </div>\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Certificate Link\"\r\n          placeholder=\"Enter certificate link\"\r\n          value={values.certificationLink}\r\n          onChange={(event) =>\r\n            setValues((prev) => ({\r\n              ...prev,\r\n              certificationLink: event.target.value,\r\n            }))\r\n          }\r\n        />\r\n        <InputControl\r\n          label=\"Location\"\r\n          placeholder=\"Enter location eg. Bangalore\"\r\n          value={values.location}\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, location: event.target.value }))\r\n          }\r\n        />\r\n      </div>\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Start Date\"\r\n          type=\"date\"\r\n          placeholder=\"Enter Start Date of work\"\r\n          value={values.startDate}\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, startDate: event.target.value }))\r\n          }\r\n        />\r\n        <InputControl\r\n          label=\"End Date\"\r\n          type=\"date\"\r\n          placeholder=\"Enter End Date of work\"\r\n          value={values.endDate}\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, endDate: event.target.value }))\r\n          }\r\n        />\r\n      </div>\r\n\r\n      <div className={styles.column}>\r\n        <label>Enter work description</label>\r\n        <InputControl\r\n          placeholder=\"Line 1\"\r\n          value={values.points ? values.points[0] : \"\"}\r\n          onChange={(event) => handlePointUpdate(event.target.value, 0)}\r\n        />\r\n        <InputControl\r\n          placeholder=\"Line 2\"\r\n          value={values.points ? values.points[1] : \"\"}\r\n          onChange={(event) => handlePointUpdate(event.target.value, 1)}\r\n        />\r\n        <InputControl\r\n          placeholder=\"Line 3\"\r\n          value={values.points ? values.points[2] : \"\"}\r\n          onChange={(event) => handlePointUpdate(event.target.value, 2)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n  const projectBody = (\r\n    <div className={styles.detail}>\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Title\"\r\n          value={values.title}\r\n          placeholder=\"Enter title eg. Chat app\"\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, title: event.target.value }))\r\n          }\r\n        />\r\n      </div>\r\n      <InputControl\r\n        label=\"Overview\"\r\n        value={values.overview}\r\n        placeholder=\"Enter basic overview of project\"\r\n        onChange={(event) =>\r\n          setValues((prev) => ({ ...prev, overview: event.target.value }))\r\n        }\r\n      />\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Deployed Link\"\r\n          value={values.link}\r\n          placeholder=\"Enter deployed link of project\"\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, link: event.target.value }))\r\n          }\r\n        />\r\n        <InputControl\r\n          label=\"Github Link\"\r\n          value={values.github}\r\n          placeholder=\"Enter github link of project\"\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, github: event.target.value }))\r\n          }\r\n        />\r\n      </div>\r\n      <div className={styles.column}>\r\n        <label>Enter project description</label>\r\n        <InputControl\r\n          placeholder=\"Line 1\"\r\n          value={values.points ? values.points[0] : \"\"}\r\n          onChange={(event) => handlePointUpdate(event.target.value, 0)}\r\n        />\r\n        <InputControl\r\n          placeholder=\"Line 2\"\r\n          value={values.points ? values.points[1] : \"\"}\r\n          onChange={(event) => handlePointUpdate(event.target.value, 1)}\r\n        />\r\n        <InputControl\r\n          placeholder=\"Line 3\"\r\n          value={values.points ? values.points[2] : \"\"}\r\n          onChange={(event) => handlePointUpdate(event.target.value, 2)}\r\n        />\r\n        <InputControl\r\n          placeholder=\"Line 4\"\r\n          value={values.points ? values.points[3] : \"\"}\r\n          onChange={(event) => handlePointUpdate(event.target.value, 3)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n  const educationBody = (\r\n    <div className={styles.detail}>\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Title\"\r\n          value={values.title}\r\n          placeholder=\"Enter title eg. B-tech\"\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, title: event.target.value }))\r\n          }\r\n        />\r\n      </div>\r\n      <InputControl\r\n        label=\"College/School Name\"\r\n        value={values.college}\r\n        placeholder=\"Enter name of your college/school\"\r\n        onChange={(event) =>\r\n          setValues((prev) => ({ ...prev, college: event.target.value }))\r\n        }\r\n      />\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Start Date\"\r\n          type=\"date\"\r\n          placeholder=\"Enter start date of this education\"\r\n          value={values.startDate}\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, startDate: event.target.value }))\r\n          }\r\n        />\r\n        <InputControl\r\n          label=\"End Date\"\r\n          type=\"date\"\r\n          placeholder=\"Enter end date of this education\"\r\n          value={values.endDate}\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, endDate: event.target.value }))\r\n          }\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n  const basicInfoBody = (\r\n    <div className={styles.detail}>\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Name\"\r\n          placeholder=\"Enter your full name eg. Antara Kolhatkar\"\r\n          value={values.name}\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, name: event.target.value }))\r\n          }\r\n        />\r\n        <InputControl\r\n          label=\"Title\"\r\n          value={values.title}\r\n          placeholder=\"Enter your title eg. Data Analyst\"\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, title: event.target.value }))\r\n          }\r\n        />\r\n      </div>\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Linkedin Link\"\r\n          value={values.linkedin}\r\n          placeholder=\"Enter your Linkedin profile link\"\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, linkedin: event.target.value }))\r\n          }\r\n        />\r\n        <InputControl\r\n          label=\"Github Link\"\r\n          value={values.github}\r\n          placeholder=\"Enter your Github profile link\"\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, github: event.target.value }))\r\n          }\r\n        />\r\n      </div>\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Email\"\r\n          value={values.email}\r\n          placeholder=\"Enter your email\"\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, email: event.target.value }))\r\n          }\r\n        />\r\n        <InputControl\r\n          label=\"Enter phone\"\r\n          value={values.phone}\r\n          placeholder=\"Enter your phone number\"\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, phone: event.target.value }))\r\n          }\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n  const achievementsBody = (\r\n    <div className={styles.detail}>\r\n      <div className={styles.column}>\r\n        <label>List your achievements</label>\r\n        <InputControl\r\n          placeholder=\"Line 1\"\r\n          value={values.points ? values.points[0] : \"\"}\r\n          onChange={(event) => handlePointUpdate(event.target.value, 0)}\r\n        />\r\n        <InputControl\r\n          placeholder=\"Line 2\"\r\n          value={values.points ? values.points[1] : \"\"}\r\n          onChange={(event) => handlePointUpdate(event.target.value, 1)}\r\n        />\r\n        <InputControl\r\n          placeholder=\"Line 3\"\r\n          value={values.points ? values.points[2] : \"\"}\r\n          onChange={(event) => handlePointUpdate(event.target.value, 2)}\r\n        />\r\n        <InputControl\r\n          placeholder=\"Line 4\"\r\n          value={values.points ? values.points[3] : \"\"}\r\n          onChange={(event) => handlePointUpdate(event.target.value, 3)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n  const summaryBody = (\r\n    <div className={styles.detail}>\r\n      <InputControl\r\n        label=\"Summary\"\r\n        value={values.summary}\r\n        placeholder=\"Enter your objective/summary\"\r\n        onChange={(event) =>\r\n          setValues((prev) => ({ ...prev, summary: event.target.value }))\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n  const otherBody = (\r\n    <div className={styles.detail}>\r\n      <InputControl\r\n        label=\"Other\"\r\n        value={values.other}\r\n        placeholder=\"Enter something\"\r\n        onChange={(event) =>\r\n          setValues((prev) => ({ ...prev, other: event.target.value }))\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n\r\n  const generateBody = () => {\r\n    switch (sections[activeSectionKey]) {\r\n      case sections.basicInfo:\r\n        return basicInfoBody;\r\n      case sections.workExp:\r\n        return workExpBody;\r\n      case sections.project:\r\n        return projectBody;\r\n      case sections.education:\r\n        return educationBody;\r\n      case sections.achievement:\r\n        return achievementsBody;\r\n      case sections.summary:\r\n        return summaryBody;\r\n      case sections.other:\r\n        return otherBody;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const handleSubmission = () => {\r\n    switch (sections[activeSectionKey]) {\r\n      case sections.basicInfo: {\r\n        const tempDetail = {\r\n          name: values.name,\r\n          title: values.title,\r\n          linkedin: values.linkedin,\r\n          github: values.github,\r\n          email: values.email,\r\n          phone: values.phone,\r\n        };\r\n\r\n        props.setInformation((prev) => ({\r\n          ...prev,\r\n          [sections.basicInfo]: {\r\n            ...prev[sections.basicInfo],\r\n            detail: tempDetail,\r\n            sectionTitle,\r\n          },\r\n        }));\r\n        break;\r\n      }\r\n      case sections.workExp: {\r\n        const tempDetail = {\r\n          certificationLink: values.certificationLink,\r\n          title: values.title,\r\n          startDate: values.startDate,\r\n          endDate: values.endDate,\r\n          companyName: values.companyName,\r\n          location: values.location,\r\n          points: values.points,\r\n        };\r\n        const tempDetails = [...information[sections.workExp]?.details];\r\n        tempDetails[activeDetailIndex] = tempDetail;\r\n\r\n        props.setInformation((prev) => ({\r\n          ...prev,\r\n          [sections.workExp]: {\r\n            ...prev[sections.workExp],\r\n            details: tempDetails,\r\n            sectionTitle,\r\n          },\r\n        }));\r\n        break;\r\n      }\r\n      case sections.project: {\r\n        const tempDetail = {\r\n          link: values.link,\r\n          title: values.title,\r\n          overview: values.overview,\r\n          github: values.github,\r\n          points: values.points,\r\n        };\r\n        const tempDetails = [...information[sections.project]?.details];\r\n        tempDetails[activeDetailIndex] = tempDetail;\r\n\r\n        props.setInformation((prev) => ({\r\n          ...prev,\r\n          [sections.project]: {\r\n            ...prev[sections.project],\r\n            details: tempDetails,\r\n            sectionTitle,\r\n          },\r\n        }));\r\n        break;\r\n      }\r\n      case sections.education: {\r\n        const tempDetail = {\r\n          title: values.title,\r\n          college: values.college,\r\n          startDate: values.startDate,\r\n          endDate: values.endDate,\r\n        };\r\n        const tempDetails = [...information[sections.education]?.details];\r\n        tempDetails[activeDetailIndex] = tempDetail;\r\n\r\n        props.setInformation((prev) => ({\r\n          ...prev,\r\n          [sections.education]: {\r\n            ...prev[sections.education],\r\n            details: tempDetails,\r\n            sectionTitle,\r\n          },\r\n        }));\r\n        break;\r\n      }\r\n      case sections.achievement: {\r\n        const tempPoints = values.points;\r\n\r\n        props.setInformation((prev) => ({\r\n          ...prev,\r\n          [sections.achievement]: {\r\n            ...prev[sections.achievement],\r\n            points: tempPoints,\r\n            sectionTitle,\r\n          },\r\n        }));\r\n        break;\r\n      }\r\n      case sections.summary: {\r\n        const tempDetail = values.summary;\r\n\r\n        props.setInformation((prev) => ({\r\n          ...prev,\r\n          [sections.summary]: {\r\n            ...prev[sections.summary],\r\n            detail: tempDetail,\r\n            sectionTitle,\r\n          },\r\n        }));\r\n        break;\r\n      }\r\n      case sections.other: {\r\n        const tempDetail = values.other;\r\n\r\n        props.setInformation((prev) => ({\r\n          ...prev,\r\n          [sections.other]: {\r\n            ...prev[sections.other],\r\n            detail: tempDetail,\r\n            sectionTitle,\r\n          },\r\n        }));\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAddNew = () => {\r\n    const details = activeInformation?.details;\r\n    if (!details) return;\r\n    const lastDetail = details.slice(-1)[0];\r\n    if (!Object.keys(lastDetail).length) return;\r\n    details?.push({});\r\n\r\n    props.setInformation((prev) => ({\r\n      ...prev,\r\n      [sections[activeSectionKey]]: {\r\n        ...information[sections[activeSectionKey]],\r\n        details: details,\r\n      },\r\n    }));\r\n    setActiveDetailIndex(details?.length - 1);\r\n  };\r\n\r\n  const handleDeleteDetail = (index) => {\r\n    const details = activeInformation?.details\r\n      ? [...activeInformation?.details]\r\n      : \"\";\r\n    if (!details) return;\r\n    details.splice(index, 1);\r\n    props.setInformation((prev) => ({\r\n      ...prev,\r\n      [sections[activeSectionKey]]: {\r\n        ...information[sections[activeSectionKey]],\r\n        details: details,\r\n      },\r\n    }));\r\n\r\n    setActiveDetailIndex((prev) => (prev === index ? 0 : prev - 1));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const activeInfo = information[sections[activeSectionKey]];\r\n    setActiveInformation(activeInfo);\r\n    setSectionTitle(sections[activeSectionKey]);\r\n    setActiveDetailIndex(0);\r\n    setValues({\r\n      name: activeInfo?.detail?.name || \"\",\r\n      overview: activeInfo?.details\r\n        ? activeInfo.details[0]?.overview || \"\"\r\n        : \"\",\r\n      link: activeInfo?.details ? activeInfo.details[0]?.link || \"\" : \"\",\r\n      certificationLink: activeInfo?.details\r\n        ? activeInfo.details[0]?.certificationLink || \"\"\r\n        : \"\",\r\n      companyName: activeInfo?.details\r\n        ? activeInfo.details[0]?.companyName || \"\"\r\n        : \"\",\r\n      college: activeInfo?.details\r\n        ? activeInfo.details[0]?.college || \"\"\r\n        : \"\",\r\n      location: activeInfo?.details\r\n        ? activeInfo.details[0]?.location || \"\"\r\n        : \"\",\r\n      startDate: activeInfo?.details\r\n        ? activeInfo.details[0]?.startDate || \"\"\r\n        : \"\",\r\n      endDate: activeInfo?.details ? activeInfo.details[0]?.endDate || \"\" : \"\",\r\n      points: activeInfo?.details\r\n        ? activeInfo.details[0]?.points\r\n          ? [...activeInfo.details[0]?.points]\r\n          : \"\"\r\n        : activeInfo?.points\r\n        ? [...activeInfo.points]\r\n        : \"\",\r\n      title: activeInfo?.details\r\n        ? activeInfo.details[0]?.title || \"\"\r\n        : activeInfo?.detail?.title || \"\",\r\n      linkedin: activeInfo?.detail?.linkedin || \"\",\r\n      github: activeInfo?.details\r\n        ? activeInfo.details[0]?.github || \"\"\r\n        : activeInfo?.detail?.github || \"\",\r\n      phone: activeInfo?.detail?.phone || \"\",\r\n      email: activeInfo?.detail?.email || \"\",\r\n      summary: typeof activeInfo?.detail !== \"object\" ? activeInfo.detail : \"\",\r\n      other: typeof activeInfo?.detail !== \"object\" ? activeInfo.detail : \"\",\r\n    });\r\n  }, [activeSectionKey]);\r\n\r\n  useEffect(() => {\r\n    setActiveInformation(information[sections[activeSectionKey]]);\r\n  }, [information]);\r\n\r\n  useEffect(() => {\r\n    const details = activeInformation?.details;\r\n    if (!details) return;\r\n\r\n    const activeInfo = information[sections[activeSectionKey]];\r\n    setValues({\r\n      overview: activeInfo.details[activeDetailIndex]?.overview || \"\",\r\n      link: activeInfo.details[activeDetailIndex]?.link || \"\",\r\n      certificationLink:\r\n        activeInfo.details[activeDetailIndex]?.certificationLink || \"\",\r\n      companyName: activeInfo.details[activeDetailIndex]?.companyName || \"\",\r\n      location: activeInfo.details[activeDetailIndex]?.location || \"\",\r\n      startDate: activeInfo.details[activeDetailIndex]?.startDate || \"\",\r\n      endDate: activeInfo.details[activeDetailIndex]?.endDate || \"\",\r\n      points: activeInfo.details[activeDetailIndex]?.points || \"\",\r\n      title: activeInfo.details[activeDetailIndex]?.title || \"\",\r\n      linkedin: activeInfo.details[activeDetailIndex]?.linkedin || \"\",\r\n      github: activeInfo.details[activeDetailIndex]?.github || \"\",\r\n      college: activeInfo.details[activeDetailIndex]?.college || \"\",\r\n    });\r\n  }, [activeDetailIndex]);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.header}>\r\n        {Object.keys(sections)?.map((key) => (\r\n          <div\r\n            className={`${styles.section} ${\r\n              activeSectionKey === key ? styles.active : \"\"\r\n            }`}\r\n            key={key}\r\n            onClick={() => setActiveSectionKey(key)}\r\n          >\r\n            {sections[key]}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className={styles.body}>\r\n        <InputControl\r\n          label=\"Title\"\r\n          placeholder=\"Enter section title\"\r\n          value={sectionTitle}\r\n          onChange={(event) => setSectionTitle(event.target.value)}\r\n        />\r\n\r\n        <div className={styles.chips}>\r\n          {activeInformation?.details\r\n            ? activeInformation?.details?.map((item, index) => (\r\n                <div\r\n                  className={`${styles.chip} ${\r\n                    activeDetailIndex === index ? styles.active : \"\"\r\n                  }`}\r\n                  key={item.title + index}\r\n                  onClick={() => setActiveDetailIndex(index)}\r\n                >\r\n                  <p>\r\n                    {sections[activeSectionKey]} {index + 1}\r\n                  </p>\r\n                  <X\r\n                    onClick={(event) => {\r\n                      event.stopPropagation();\r\n                      handleDeleteDetail(index);\r\n                    }}\r\n                  />\r\n                </div>\r\n              ))\r\n            : \"\"}\r\n          {activeInformation?.details &&\r\n          activeInformation?.details?.length > 0 ? (\r\n            <div className={styles.new} onClick={handleAddNew}>\r\n              +New\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n\r\n        {generateBody()}\r\n        <button onClick={handleSubmission}>Save</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Editor;","C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\input\\input.js",[],[],"C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Analysis\\Analyze.js",[],[],"C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Navbar\\index.js",[],[],"C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Recc\\jobRolesData.jsx",[],[],"C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Recc\\Rec.js",[],[],["123"],"C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Explore\\App1.js",[],[],"C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Explore\\SkillSuggestions.js",["124","125"],[],"import React from \"react\";\r\nimport \"./OutlinedDiv.css\";\r\nimport { useState } from \"react\";\r\n\r\nconst SkillSuggestions = ({ skills }) => {\r\n  // A very basic set of predefined job roles and their required skills\r\n  const [roleSkills, setRoleSkills] = useState([]);\r\n  const jobRoles = [\r\n    { role: \"Web Developer\", skills: [\"HTML\", \"CSS\", \"JavaScript\", \"React\"] },\r\n    { role: \"Data Analyst\", skills: [\"SQL\", \"Excel\", \"Data Analysis\"] },\r\n    {\r\n      role: \"Graphic Designer\",\r\n      skills: [\"Adobe Photoshop\", \"Illustrator\", \"UI/UX\"]\r\n    },\r\n    { role: \"Software Engineer\", skills: [\"Java\", \"Python\", \"Data Structures\"] }\r\n  ];\r\n\r\n  // Split the user-entered skills and create an array of skill strings\r\n  const userSkills = skills.split(\",\").map((skill) => skill.trim());\r\n\r\n  // Find job roles that match the user's skills\r\n  const suggestedRoles = jobRoles.filter((role) =>\r\n    userSkills.every((skill) => role.skills.includes(skill))\r\n  );\r\n\r\n  // Extract suggested job roles\r\n  const suggestedJobRoles = suggestedRoles.map((role) => role.role);\r\n\r\n  // Recommended skills and courses based on the job role\r\n  const recommendedSkills =\r\n    suggestedRoles.length > 0 ? suggestedRoles[0].skills : [];\r\n  const recommendedCourses =\r\n    {\r\n      \"Web Developer\": [\r\n        {\r\n          name: \"Web Development Fundamentals\",\r\n          link:\r\n            \"https://developer.mozilla.org/en-US/docs/Web/Guide/Introduction_to_Web_development\"\r\n        },\r\n        {\r\n          name: \"NodeJS Mastery Course\",\r\n          link:\r\n            \"https://www.simplilearn.com/nodejs-for-beginners-article#:~:text=js%3F-,Node.,makes%20it%20fast%20and%20lightweight.\"\r\n        }\r\n      ],\r\n      \"Data Analyst\": [\r\n        {\r\n          name: \"SQL for Data Analysis\",\r\n          link: \"https://www.udacity.com/course/sql-for-data-analysis--ud198\"\r\n        },\r\n        {\r\n          name: \"Data Visualization with Python\",\r\n          link: \"https://www.geeksforgeeks.org/data-visualization-with-python/\"\r\n        }\r\n      ],\r\n      \"Graphic Designer\": [\r\n        {\r\n          name: \"Graphic Design Fundamentals\",\r\n          link:\r\n            \"https://edu.gcfglobal.org/en/beginning-graphic-design/fundamentals-of-design/1/\"\r\n        },\r\n        {\r\n          name: \"UI/UX Design Principles\",\r\n          link: \"https://www.springboard.com/blog/design/ux-design-principles/\"\r\n        }\r\n      ],\r\n      \"Software Engineer\": [\r\n        {\r\n          name: \"Algorithms and Data Structures\",\r\n          link:\r\n            \"https://developer.mozilla.org/en-US/docs/Web/Guide/Introduction_to_Web_development\"\r\n        },\r\n        {\r\n          name: \"Python Programming Masterclass\",\r\n          link:\r\n            \"https://developer.mozilla.org/en-US/docs/Web/Guide/Introduction_to_Web_development\"\r\n        }\r\n      ]\r\n      // \"Data Analyst\": [\r\n      //   \"SQL for Data Analysis\",\r\n      //   \"Data Visualization with Python\"\r\n      // ],\r\n      // \"Graphic Designer\": [\r\n      //   \"Graphic Design Fundamentals\",\r\n      //   \"UI/UX Design Principles\"\r\n      // ],\r\n      // \"Software Engineer\": [\r\n      //   \"Algorithms and Data Structures\",\r\n      //   \"Python Programming Masterclass\"\r\n      // ]\r\n    }[suggestedJobRoles[0]] || [];\r\n\r\n  //changes\r\n  //changes\r\n  return (\r\n    <div>\r\n      <div className=\"outlined-box\">\r\n        <h2>Job Role Suggestions</h2>\r\n        <ul>\r\n          {suggestedJobRoles.length > 0 ? (\r\n            suggestedJobRoles.map((role, index) => <li key={index}>{role}</li>)\r\n          ) : (\r\n            <li>No matching job roles found for the entered skills.</li>\r\n          )}\r\n        </ul>\r\n      </div>\r\n      {recommendedSkills.length > 0 && (\r\n        <div className=\"outlined-box\">\r\n          <h2>Recommended Skills</h2>\r\n          <ul>\r\n            {recommendedSkills.map((skill, index) => (\r\n              <li key={index}>{skill}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n      {recommendedCourses.length > 0 && (\r\n        <div className=\"outlined-box\">\r\n          <h2>Recommended Courses and Certifications</h2>\r\n          <ul>\r\n            {recommendedCourses.map((course, index) => (\r\n              <li key={index}>\r\n                <a href={course.link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                  {course.name}\r\n                </a>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n      <div className=\"outlined-box\">\r\n        <h2>Resume Score</h2>\r\n        {suggestedRoles.length > 0 ? (\r\n          suggestedRoles.map((role, index) => (\r\n            <div key={index}>\r\n              <p>\r\n                Percentage of Skills Matched:{\" \"}\r\n                {calculateSkillMatchPercentage(role.skills, userSkills)}%\r\n              </p>\r\n              {/* <p>\r\n                Please Note:\r\n                <i>\r\n                  The Resume Score is Percentage of User's skills for the\r\n                  suggested job role.\r\n                </i>\r\n                <i>User can improve percentage by adding Recommended Skills</i>\r\n              </p> */}\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>No matching job roles found for the entered skills.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction calculateSkillMatchPercentage(requiredSkills, userSkills) {\r\n  const matchedSkills = requiredSkills.filter((skill) =>\r\n    userSkills.includes(skill)\r\n  );\r\n  const percentage = (matchedSkills.length / requiredSkills.length) * 100;\r\n  return percentage.toFixed(2);\r\n}\r\n\r\nexport default SkillSuggestions;\r\n","C:\\Users\\Nilesh\\Downloads\\Project_Sem_5\\my-app\\src\\components\\Explore\\SkillInput.js",[],[],{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":294,"column":6,"nodeType":"130","endLine":294,"endColumn":8,"suggestions":"131"},{"ruleId":"128","severity":1,"message":"132","line":298,"column":6,"nodeType":"130","endLine":298,"endColumn":14,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":316,"column":15,"nodeType":"136","endLine":316,"endColumn":55},{"ruleId":"134","severity":1,"message":"135","line":323,"column":15,"nodeType":"136","endLine":323,"endColumn":42},{"ruleId":"134","severity":1,"message":"135","line":330,"column":15,"nodeType":"136","endLine":330,"endColumn":42},{"ruleId":"134","severity":1,"message":"135","line":337,"column":15,"nodeType":"136","endLine":337,"endColumn":42},{"ruleId":"137","severity":1,"message":"138","line":357,"column":5,"nodeType":"139","messageId":"140","endLine":481,"endColumn":6},{"ruleId":"128","severity":1,"message":"141","line":564,"column":6,"nodeType":"130","endLine":564,"endColumn":24,"suggestions":"142"},{"ruleId":"128","severity":1,"message":"143","line":568,"column":6,"nodeType":"130","endLine":568,"endColumn":19,"suggestions":"144"},{"ruleId":"128","severity":1,"message":"145","line":590,"column":6,"nodeType":"130","endLine":590,"endColumn":25,"suggestions":"146"},{"ruleId":"126","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":7,"column":10,"nodeType":"150","messageId":"151","endLine":7,"endColumn":20},{"ruleId":"148","severity":1,"message":"152","line":7,"column":22,"nodeType":"150","messageId":"151","endLine":7,"endColumn":35},"no-new-object",["153"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'sections.achievement', 'sections.education', 'sections.other', 'sections.project', 'sections.summary', and 'sections.workExp'. Either include them or remove the dependency array.","ArrayExpression",["154"],"React Hook useEffect has missing dependencies: 'swapSourceTarget' and 'target'. Either include them or remove the dependency array.",["155"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'information' and 'sections'. Either include them or remove the dependency array.",["156"],"React Hook useEffect has missing dependencies: 'activeSectionKey' and 'sections'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setActiveInformation' needs the current value of 'activeSectionKey'.",["157"],"React Hook useEffect has missing dependencies: 'activeInformation?.details', 'activeSectionKey', 'information', and 'sections'. Either include them or remove the dependency array.",["158"],["153"],"no-unused-vars","'roleSkills' is assigned a value but never used.","Identifier","unusedVar","'setRoleSkills' is assigned a value but never used.","no-object-constructor",{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"163","fix":"165"},{"desc":"166","fix":"167"},"Update the dependencies array to be: [sections.achievement, sections.education, sections.other, sections.project, sections.summary, sections.workExp]",{"range":"168","text":"169"},"Update the dependencies array to be: [source, swapSourceTarget, target]",{"range":"170","text":"171"},"Update the dependencies array to be: [activeSectionKey, information, sections]",{"range":"172","text":"173"},{"range":"174","text":"173"},"Update the dependencies array to be: [activeDetailIndex, activeInformation?.details, activeSectionKey, information, sections]",{"range":"175","text":"176"},[9517,9519],"[sections.achievement, sections.education, sections.other, sections.project, sections.summary, sections.workExp]",[9590,9598],"[source, swapSourceTarget, target]",[17842,17860],"[activeSectionKey, information, sections]",[17960,17973],[19047,19066],"[activeDetailIndex, activeInformation?.details, activeSectionKey, information, sections]"]